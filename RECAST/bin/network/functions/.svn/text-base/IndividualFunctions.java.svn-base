package network.functions;

import network.graph.Graph;

import org.apache.commons.math.stat.descriptive.DescriptiveStatistics;

public class IndividualFunctions {
	
	public static double clusteringCoefficient(Graph g, int node) {
		double cc=0;
		Integer edges[] = g.getNeighs(node);
		int n = edges.length;
		for(int i=0; i<n; i++) {
			for(int j=i+1; j<n; j++) {
				if(g.existsEdge(edges[i], edges[j]))
					cc++;
			}
		}
		cc = 2*cc/(n*(n-1));
		return cc;
	}
	
	public static DescriptiveStatistics getFullyDisconnectedDegrees(Graph g) {
		
		DescriptiveStatistics stat = new DescriptiveStatistics();
		
		Integer nodes[] = g.getNodes();
		for(int i=0; i<nodes.length; i++) {
			double cc = clusteringCoefficient(g, nodes[i]);
			if(cc == 0 && g.getDegree(nodes[i]) > 0) {
				stat.addValue(g.getDegree(nodes[i]));
			}
		}
		
		return stat;
		
	}
	
	
	public static void main(String[] args) {
		Graph g = new Graph();
		
		g.addEdge(1, 2);
		g.addEdge(1, 3);
		g.addEdge(1, 4);
		//g.addEdge(2, 3);
		g.addEdge(4, 5);
		
		System.out.println(GlobalFunctions.getMaxFullyDisconnectedDegree(g));

	}

}
